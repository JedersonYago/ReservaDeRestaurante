import Config from "../models/Config";
import { logger } from "./logger";

export async function initializeDefaultConfig() {
  try {
    logger.info("üîß Verificando configura√ß√µes padr√£o...");

    // Verificar se j√° existe alguma configura√ß√£o
    const existingConfig = await Config.findOne().sort({ updatedAt: -1 });

    if (existingConfig) {
      logger.info("‚úÖ Configura√ß√µes j√° existem, pulando inicializa√ß√£o");
      return existingConfig;
    }

    logger.info("üìù Criando configura√ß√µes padr√£o...");

    // Configura√ß√µes padr√£o
    const defaultConfig = new Config({
      maxReservationsPerUser: 5,
      reservationLimitHours: 24,
      minIntervalBetweenReservations: 30,
      openingHour: "11:00",
      closingHour: "23:00",
      isReservationLimitEnabled: true,
      isIntervalEnabled: true,
      isOpeningHoursEnabled: true,
      updatedBy: "system",
      updatedAt: new Date(),
    });

    await defaultConfig.save();

    logger.info("‚úÖ Configura√ß√µes padr√£o criadas com sucesso");
    logger.info("üìã Configura√ß√µes padr√£o:");
    logger.info(
      `   - Hor√°rio de funcionamento: ${defaultConfig.openingHour} - ${defaultConfig.closingHour}`
    );
    logger.info(
      `   - Limite de reservas: ${defaultConfig.maxReservationsPerUser} por usu√°rio`
    );
    logger.info(
      `   - Tempo de confirma√ß√£o: ${defaultConfig.minIntervalBetweenReservations} minutos`
    );

    return defaultConfig;
  } catch (error) {
    logger.error("‚ùå Erro ao criar configura√ß√µes padr√£o:", error);
    throw error;
  }
}
